
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000036e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  0080011c  0080011c  0000041e  2**0
                  ALLOC
  3 .stab         00000ea0  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d24  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000583  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000327  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000136  00000000  00000000  000028df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000013c  00000000  00000000  00002a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000222  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002b7  00000000  00000000  00002d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_18>
  4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  9e:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */  
    
    sei();  
}

int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
        uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
    }
    
    int write_pointer = (tx_buffer.end + 1) % UART_TX_BUFFER_SIZE;
  b4:	e0 91 22 02 	lds	r30, 0x0222
  b8:	f0 91 23 02 	lds	r31, 0x0223
  bc:	cf 01       	movw	r24, r30
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	60 e4       	ldi	r22, 0x40	; 64
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__divmodhi4>
  c8:	9c 01       	movw	r18, r24
    
    if (write_pointer != tx_buffer.start){
  ca:	40 91 20 02 	lds	r20, 0x0220
  ce:	50 91 21 02 	lds	r21, 0x0221
  d2:	84 17       	cp	r24, r20
  d4:	95 07       	cpc	r25, r21
  d6:	89 f0       	breq	.+34     	; 0xfa <uart_putchar+0x54>
        tx_buffer.buffer[tx_buffer.end] = c;
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	e0 56       	subi	r30, 0x60	; 96
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	8c 2f       	mov	r24, r28
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	80 83       	st	Z, r24
        tx_buffer.end = write_pointer;
  e8:	30 93 23 02 	sts	0x0223, r19
  ec:	20 93 22 02 	sts	0x0222, r18
        
        /* Data available. Enable the transmit interrupt for serial port 0. */
        UCSR0B |= _BV(UDRIE0);  
  f0:	80 91 c1 00 	lds	r24, 0x00C1
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	80 93 c1 00 	sts	0x00C1, r24
    }
    
    return 0;
}
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <uart_getchar>:

int uart_getchar(FILE *stream) {
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
    int read_pointer = (rx_buffer.start + 1) % UART_RX_BUFFER_SIZE;
 106:	cc e9       	ldi	r28, 0x9C	; 156
 108:	d1 e0       	ldi	r29, 0x01	; 1
 10a:	88 81       	ld	r24, Y
 10c:	99 81       	ldd	r25, Y+1	; 0x01
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	60 e4       	ldi	r22, 0x40	; 64
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__divmodhi4>
    
    rx_buffer.start = read_pointer;
 118:	99 83       	std	Y+1, r25	; 0x01
 11a:	88 83       	st	Y, r24
    return rx_buffer.buffer[read_pointer];
 11c:	fc 01       	movw	r30, r24
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e4 5e       	subi	r30, 0xE4	; 228
 124:	fe 4f       	sbci	r31, 0xFE	; 254
}
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <uart_init>:

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
    
    tx_buffer.start = 0;
 130:	10 92 21 02 	sts	0x0221, r1
 134:	10 92 20 02 	sts	0x0220, r1
    tx_buffer.end   = 0;
 138:	10 92 23 02 	sts	0x0223, r1
 13c:	10 92 22 02 	sts	0x0222, r1

    rx_buffer.start = 0;
 140:	10 92 9d 01 	sts	0x019D, r1
 144:	10 92 9c 01 	sts	0x019C, r1
    rx_buffer.end   = 0;
 148:	10 92 9f 01 	sts	0x019F, r1
 14c:	10 92 9e 01 	sts	0x019E, r1
    
    UBRR0H = UBRRH_VALUE;
 150:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
 154:	87 e6       	ldi	r24, 0x67	; 103
 156:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */  
 160:	88 e1       	ldi	r24, 0x18	; 24
 162:	80 93 c1 00 	sts	0x00C1, r24
    
    sei();  
 166:	78 94       	sei
 168:	08 95       	ret

0000016a <__vector_18>:
    
    rx_buffer.start = read_pointer;
    return rx_buffer.buffer[read_pointer];
}

ISR(USART_RX_vect) {
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
    int write_pointer = (rx_buffer.end + 1) % UART_RX_BUFFER_SIZE;
 18a:	e0 91 9e 01 	lds	r30, 0x019E
 18e:	f0 91 9f 01 	lds	r31, 0x019F
 192:	cf 01       	movw	r24, r30
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	60 e4       	ldi	r22, 0x40	; 64
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__divmodhi4>

    /* Add next byte to ringbuffer if it has space available. */
    if (write_pointer != rx_buffer.start){
 19e:	20 91 9c 01 	lds	r18, 0x019C
 1a2:	30 91 9d 01 	lds	r19, 0x019D
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	69 f0       	breq	.+26     	; 0x1c6 <__vector_18+0x5c>
        rx_buffer.buffer[rx_buffer.end] = UDR0;
 1ac:	20 91 c6 00 	lds	r18, 0x00C6
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e4 5e       	subi	r30, 0xE4	; 228
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	31 83       	std	Z+1, r19	; 0x01
 1bc:	20 83       	st	Z, r18
        rx_buffer.end = write_pointer;
 1be:	90 93 9f 01 	sts	0x019F, r25
 1c2:	80 93 9e 01 	sts	0x019E, r24
    }
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_19>:

ISR(USART_UDRE_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
    int read_pointer = (tx_buffer.start + 1) % UART_TX_BUFFER_SIZE;
 206:	80 91 20 02 	lds	r24, 0x0220
 20a:	90 91 21 02 	lds	r25, 0x0221
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	60 e4       	ldi	r22, 0x40	; 64
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__divmodhi4>
    
    /* Transmit next byte if data available in ringbuffer. */
    if (read_pointer != tx_buffer.end) {
 218:	20 91 22 02 	lds	r18, 0x0222
 21c:	30 91 23 02 	lds	r19, 0x0223
 220:	82 17       	cp	r24, r18
 222:	93 07       	cpc	r25, r19
 224:	69 f0       	breq	.+26     	; 0x240 <__vector_19+0x5a>
        UDR0 = tx_buffer.buffer[read_pointer];
 226:	fc 01       	movw	r30, r24
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e0 56       	subi	r30, 0x60	; 96
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	20 81       	ld	r18, Z
 232:	20 93 c6 00 	sts	0x00C6, r18
        tx_buffer.start = read_pointer;
 236:	90 93 21 02 	sts	0x0221, r25
 23a:	80 93 20 02 	sts	0x0220, r24
 23e:	05 c0       	rjmp	.+10     	; 0x24a <__vector_19+0x64>
    } else {
        /* Nothing to send. Disable the transmit interrupt for serial port 0. */
        UCSR0B &= ~_BV(UDRIE0);
 240:	80 91 c1 00 	lds	r24, 0x00C1
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	80 93 c1 00 	sts	0x00C1, r24
    }
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <main>:
#include "main.h"
#include "uart.h"

int main(void) {    

    uart_init();
 26a:	0e 94 98 00 	call	0x130	; 0x130 <uart_init>
	DDRD = 2;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	8a b9       	out	0x0a, r24	; 10
	char a = 'a';
    stdout = &uart_output;
 272:	8e e0       	ldi	r24, 0x0E	; 14
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	90 93 27 02 	sts	0x0227, r25
 27a:	80 93 26 02 	sts	0x0226, r24
    stdin  = &uart_input;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	90 93 25 02 	sts	0x0225, r25
 286:	80 93 24 02 	sts	0x0224, r24
                
    while (1) {
        /* Blink led by toggling state of PORTB5 (Arduino digital 13). */
        PORTB ^= _BV(PORTB5);
 28a:	c0 e2       	ldi	r28, 0x20	; 32
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	8c 27       	eor	r24, r28
 290:	85 b9       	out	0x05, r24	; 5
        
        fputc('a', stdout);
 292:	60 91 26 02 	lds	r22, 0x0226
 296:	70 91 27 02 	lds	r23, 0x0227
 29a:	81 e6       	ldi	r24, 0x61	; 97
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 83 01 	call	0x306	; 0x306 <fputc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	81 ee       	ldi	r24, 0xE1	; 225
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x3e>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x48>
 2b2:	00 00       	nop
 2b4:	eb cf       	rjmp	.-42     	; 0x28c <main+0x22>

000002b6 <__divmodhi4>:
 2b6:	97 fb       	bst	r25, 7
 2b8:	07 2e       	mov	r0, r23
 2ba:	16 f4       	brtc	.+4      	; 0x2c0 <__divmodhi4+0xa>
 2bc:	00 94       	com	r0
 2be:	07 d0       	rcall	.+14     	; 0x2ce <__divmodhi4_neg1>
 2c0:	77 fd       	sbrc	r23, 7
 2c2:	09 d0       	rcall	.+18     	; 0x2d6 <__divmodhi4_neg2>
 2c4:	0e 94 6f 01 	call	0x2de	; 0x2de <__udivmodhi4>
 2c8:	07 fc       	sbrc	r0, 7
 2ca:	05 d0       	rcall	.+10     	; 0x2d6 <__divmodhi4_neg2>
 2cc:	3e f4       	brtc	.+14     	; 0x2dc <__divmodhi4_exit>

000002ce <__divmodhi4_neg1>:
 2ce:	90 95       	com	r25
 2d0:	81 95       	neg	r24
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <__divmodhi4_neg2>:
 2d6:	70 95       	com	r23
 2d8:	61 95       	neg	r22
 2da:	7f 4f       	sbci	r23, 0xFF	; 255

000002dc <__divmodhi4_exit>:
 2dc:	08 95       	ret

000002de <__udivmodhi4>:
 2de:	aa 1b       	sub	r26, r26
 2e0:	bb 1b       	sub	r27, r27
 2e2:	51 e1       	ldi	r21, 0x11	; 17
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <__udivmodhi4_ep>

000002e6 <__udivmodhi4_loop>:
 2e6:	aa 1f       	adc	r26, r26
 2e8:	bb 1f       	adc	r27, r27
 2ea:	a6 17       	cp	r26, r22
 2ec:	b7 07       	cpc	r27, r23
 2ee:	10 f0       	brcs	.+4      	; 0x2f4 <__udivmodhi4_ep>
 2f0:	a6 1b       	sub	r26, r22
 2f2:	b7 0b       	sbc	r27, r23

000002f4 <__udivmodhi4_ep>:
 2f4:	88 1f       	adc	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	5a 95       	dec	r21
 2fa:	a9 f7       	brne	.-22     	; 0x2e6 <__udivmodhi4_loop>
 2fc:	80 95       	com	r24
 2fe:	90 95       	com	r25
 300:	bc 01       	movw	r22, r24
 302:	cd 01       	movw	r24, r26
 304:	08 95       	ret

00000306 <fputc>:
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	18 2f       	mov	r17, r24
 310:	09 2f       	mov	r16, r25
 312:	eb 01       	movw	r28, r22
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	81 fd       	sbrc	r24, 1
 318:	03 c0       	rjmp	.+6      	; 0x320 <fputc+0x1a>
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	9f ef       	ldi	r25, 0xFF	; 255
 31e:	20 c0       	rjmp	.+64     	; 0x360 <fputc+0x5a>
 320:	82 ff       	sbrs	r24, 2
 322:	10 c0       	rjmp	.+32     	; 0x344 <fputc+0x3e>
 324:	4e 81       	ldd	r20, Y+6	; 0x06
 326:	5f 81       	ldd	r21, Y+7	; 0x07
 328:	2c 81       	ldd	r18, Y+4	; 0x04
 32a:	3d 81       	ldd	r19, Y+5	; 0x05
 32c:	42 17       	cp	r20, r18
 32e:	53 07       	cpc	r21, r19
 330:	7c f4       	brge	.+30     	; 0x350 <fputc+0x4a>
 332:	e8 81       	ld	r30, Y
 334:	f9 81       	ldd	r31, Y+1	; 0x01
 336:	9f 01       	movw	r18, r30
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	39 83       	std	Y+1, r19	; 0x01
 33e:	28 83       	st	Y, r18
 340:	10 83       	st	Z, r17
 342:	06 c0       	rjmp	.+12     	; 0x350 <fputc+0x4a>
 344:	e8 85       	ldd	r30, Y+8	; 0x08
 346:	f9 85       	ldd	r31, Y+9	; 0x09
 348:	81 2f       	mov	r24, r17
 34a:	09 95       	icall
 34c:	89 2b       	or	r24, r25
 34e:	29 f7       	brne	.-54     	; 0x31a <fputc+0x14>
 350:	2e 81       	ldd	r18, Y+6	; 0x06
 352:	3f 81       	ldd	r19, Y+7	; 0x07
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	3f 83       	std	Y+7, r19	; 0x07
 35a:	2e 83       	std	Y+6, r18	; 0x06
 35c:	81 2f       	mov	r24, r17
 35e:	90 2f       	mov	r25, r16
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
